*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: /SEW/INT_A_V....................................*
FORM GET_DATA_/SEW/INT_A_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_ACTIONS WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_A_V .
/SEW/INT_A_V-MANDT =
/SEW/INT_ACTIONS-MANDT .
/SEW/INT_A_V-MOLGA =
/SEW/INT_ACTIONS-MOLGA .
/SEW/INT_A_V-FOLDER =
/SEW/INT_ACTIONS-FOLDER .
/SEW/INT_A_V-ACTION_CODE =
/SEW/INT_ACTIONS-ACTION_CODE .
/SEW/INT_A_V-ACTION_CODE_COMPL =
/SEW/INT_ACTIONS-ACTION_CODE_COMPL .
/SEW/INT_A_V-ACTION_REASON =
/SEW/INT_ACTIONS-ACTION_REASON .
/SEW/INT_A_V-ACTION_REASON_COMPL =
/SEW/INT_ACTIONS-ACTION_REASON_COMPL .
/SEW/INT_A_V-ACTION_BEGDA =
/SEW/INT_ACTIONS-ACTION_BEGDA .
/SEW/INT_A_V-ACTION_ENDDA =
/SEW/INT_ACTIONS-ACTION_ENDDA .
/SEW/INT_A_V-EMPLOYMENT_STATUS =
/SEW/INT_ACTIONS-EMPLOYMENT_STATUS .
/SEW/INT_A_V-EMPLOYMENT_STATUS_COMPL =
/SEW/INT_ACTIONS-EMPLOYMENT_STATUS_COMPL .
/SEW/INT_A_V-LAST_CHANGED_AT =
/SEW/INT_ACTIONS-LAST_CHANGED_AT .
/SEW/INT_A_V-LAST_CHANGED_BY =
/SEW/INT_ACTIONS-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_A_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_A_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_A_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_A_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_ACTIONS WHERE
  MOLGA = /SEW/INT_A_V-MOLGA AND
  FOLDER = /SEW/INT_A_V-FOLDER .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_ACTIONS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_ACTIONS WHERE
  MOLGA = /SEW/INT_A_V-MOLGA AND
  FOLDER = /SEW/INT_A_V-FOLDER .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_ACTIONS.
    ENDIF.
/SEW/INT_ACTIONS-MANDT =
/SEW/INT_A_V-MANDT .
/SEW/INT_ACTIONS-MOLGA =
/SEW/INT_A_V-MOLGA .
/SEW/INT_ACTIONS-FOLDER =
/SEW/INT_A_V-FOLDER .
/SEW/INT_ACTIONS-ACTION_CODE =
/SEW/INT_A_V-ACTION_CODE .
/SEW/INT_ACTIONS-ACTION_CODE_COMPL =
/SEW/INT_A_V-ACTION_CODE_COMPL .
/SEW/INT_ACTIONS-ACTION_REASON =
/SEW/INT_A_V-ACTION_REASON .
/SEW/INT_ACTIONS-ACTION_REASON_COMPL =
/SEW/INT_A_V-ACTION_REASON_COMPL .
/SEW/INT_ACTIONS-ACTION_BEGDA =
/SEW/INT_A_V-ACTION_BEGDA .
/SEW/INT_ACTIONS-ACTION_ENDDA =
/SEW/INT_A_V-ACTION_ENDDA .
/SEW/INT_ACTIONS-EMPLOYMENT_STATUS =
/SEW/INT_A_V-EMPLOYMENT_STATUS .
/SEW/INT_ACTIONS-EMPLOYMENT_STATUS_COMPL =
/SEW/INT_A_V-EMPLOYMENT_STATUS_COMPL .
/SEW/INT_ACTIONS-LAST_CHANGED_AT =
/SEW/INT_A_V-LAST_CHANGED_AT .
/SEW/INT_ACTIONS-LAST_CHANGED_BY =
/SEW/INT_A_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_ACTIONS ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_ACTIONS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_A_V-UPD_FLAG,
STATUS_/SEW/INT_A_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_A_V.
  SELECT SINGLE * FROM /SEW/INT_ACTIONS WHERE
MOLGA = /SEW/INT_A_V-MOLGA AND
FOLDER = /SEW/INT_A_V-FOLDER .
/SEW/INT_A_V-MANDT =
/SEW/INT_ACTIONS-MANDT .
/SEW/INT_A_V-MOLGA =
/SEW/INT_ACTIONS-MOLGA .
/SEW/INT_A_V-FOLDER =
/SEW/INT_ACTIONS-FOLDER .
/SEW/INT_A_V-ACTION_CODE =
/SEW/INT_ACTIONS-ACTION_CODE .
/SEW/INT_A_V-ACTION_CODE_COMPL =
/SEW/INT_ACTIONS-ACTION_CODE_COMPL .
/SEW/INT_A_V-ACTION_REASON =
/SEW/INT_ACTIONS-ACTION_REASON .
/SEW/INT_A_V-ACTION_REASON_COMPL =
/SEW/INT_ACTIONS-ACTION_REASON_COMPL .
/SEW/INT_A_V-ACTION_BEGDA =
/SEW/INT_ACTIONS-ACTION_BEGDA .
/SEW/INT_A_V-ACTION_ENDDA =
/SEW/INT_ACTIONS-ACTION_ENDDA .
/SEW/INT_A_V-EMPLOYMENT_STATUS =
/SEW/INT_ACTIONS-EMPLOYMENT_STATUS .
/SEW/INT_A_V-EMPLOYMENT_STATUS_COMPL =
/SEW/INT_ACTIONS-EMPLOYMENT_STATUS_COMPL .
/SEW/INT_A_V-LAST_CHANGED_AT =
/SEW/INT_ACTIONS-LAST_CHANGED_AT .
/SEW/INT_A_V-LAST_CHANGED_BY =
/SEW/INT_ACTIONS-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_A_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_A_V-MOLGA TO
/SEW/INT_ACTIONS-MOLGA .
MOVE /SEW/INT_A_V-FOLDER TO
/SEW/INT_ACTIONS-FOLDER .
MOVE /SEW/INT_A_V-MANDT TO
/SEW/INT_ACTIONS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_ACTIONS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_ACTIONS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_ACTIONS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_C_V....................................*
FORM GET_DATA_/SEW/INT_C_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_CONVERS WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_C_V .
/SEW/INT_C_V-MANDT =
/SEW/INT_CONVERS-MANDT .
/SEW/INT_C_V-MOLGA =
/SEW/INT_CONVERS-MOLGA .
/SEW/INT_C_V-INFTY =
/SEW/INT_CONVERS-INFTY .
/SEW/INT_C_V-FIELD_SAP =
/SEW/INT_CONVERS-FIELD_SAP .
/SEW/INT_C_V-CONVERSION_METHOD =
/SEW/INT_CONVERS-CONVERSION_METHOD .
/SEW/INT_C_V-LAST_CHANGED_AT =
/SEW/INT_CONVERS-LAST_CHANGED_AT .
/SEW/INT_C_V-LAST_CHANGED_BY =
/SEW/INT_CONVERS-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_C_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_C_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_C_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_C_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_CONVERS WHERE
  MOLGA = /SEW/INT_C_V-MOLGA AND
  INFTY = /SEW/INT_C_V-INFTY AND
  FIELD_SAP = /SEW/INT_C_V-FIELD_SAP AND
  CONVERSION_METHOD = /SEW/INT_C_V-CONVERSION_METHOD .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_CONVERS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_CONVERS WHERE
  MOLGA = /SEW/INT_C_V-MOLGA AND
  INFTY = /SEW/INT_C_V-INFTY AND
  FIELD_SAP = /SEW/INT_C_V-FIELD_SAP AND
  CONVERSION_METHOD = /SEW/INT_C_V-CONVERSION_METHOD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_CONVERS.
    ENDIF.
/SEW/INT_CONVERS-MANDT =
/SEW/INT_C_V-MANDT .
/SEW/INT_CONVERS-MOLGA =
/SEW/INT_C_V-MOLGA .
/SEW/INT_CONVERS-INFTY =
/SEW/INT_C_V-INFTY .
/SEW/INT_CONVERS-FIELD_SAP =
/SEW/INT_C_V-FIELD_SAP .
/SEW/INT_CONVERS-CONVERSION_METHOD =
/SEW/INT_C_V-CONVERSION_METHOD .
/SEW/INT_CONVERS-LAST_CHANGED_AT =
/SEW/INT_C_V-LAST_CHANGED_AT .
/SEW/INT_CONVERS-LAST_CHANGED_BY =
/SEW/INT_C_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_CONVERS ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_CONVERS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_C_V-UPD_FLAG,
STATUS_/SEW/INT_C_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_C_V.
  SELECT SINGLE * FROM /SEW/INT_CONVERS WHERE
MOLGA = /SEW/INT_C_V-MOLGA AND
INFTY = /SEW/INT_C_V-INFTY AND
FIELD_SAP = /SEW/INT_C_V-FIELD_SAP AND
CONVERSION_METHOD = /SEW/INT_C_V-CONVERSION_METHOD .
/SEW/INT_C_V-MANDT =
/SEW/INT_CONVERS-MANDT .
/SEW/INT_C_V-MOLGA =
/SEW/INT_CONVERS-MOLGA .
/SEW/INT_C_V-INFTY =
/SEW/INT_CONVERS-INFTY .
/SEW/INT_C_V-FIELD_SAP =
/SEW/INT_CONVERS-FIELD_SAP .
/SEW/INT_C_V-CONVERSION_METHOD =
/SEW/INT_CONVERS-CONVERSION_METHOD .
/SEW/INT_C_V-LAST_CHANGED_AT =
/SEW/INT_CONVERS-LAST_CHANGED_AT .
/SEW/INT_C_V-LAST_CHANGED_BY =
/SEW/INT_CONVERS-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_C_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_C_V-MOLGA TO
/SEW/INT_CONVERS-MOLGA .
MOVE /SEW/INT_C_V-INFTY TO
/SEW/INT_CONVERS-INFTY .
MOVE /SEW/INT_C_V-FIELD_SAP TO
/SEW/INT_CONVERS-FIELD_SAP .
MOVE /SEW/INT_C_V-CONVERSION_METHOD TO
/SEW/INT_CONVERS-CONVERSION_METHOD .
MOVE /SEW/INT_C_V-MANDT TO
/SEW/INT_CONVERS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_CONVERS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_CONVERS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_CONVERS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_FO_V...................................*
FORM GET_DATA_/SEW/INT_FO_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_FOLDERS WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_FO_V .
/SEW/INT_FO_V-MANDT =
/SEW/INT_FOLDERS-MANDT .
/SEW/INT_FO_V-OBJECT =
/SEW/INT_FOLDERS-OBJECT .
/SEW/INT_FO_V-OBJECT_SEQNR =
/SEW/INT_FOLDERS-OBJECT_SEQNR .
/SEW/INT_FO_V-MOLGA =
/SEW/INT_FOLDERS-MOLGA .
/SEW/INT_FO_V-INFTY =
/SEW/INT_FOLDERS-INFTY .
/SEW/INT_FO_V-SEQNR =
/SEW/INT_FOLDERS-SEQNR .
/SEW/INT_FO_V-FOLDER =
/SEW/INT_FOLDERS-FOLDER .
/SEW/INT_FO_V-PREV_FOLDER =
/SEW/INT_FOLDERS-PREV_FOLDER .
/SEW/INT_FO_V-TIME_SLICE =
/SEW/INT_FOLDERS-TIME_SLICE .
/SEW/INT_FO_V-LAST_CHANGED_AT =
/SEW/INT_FOLDERS-LAST_CHANGED_AT .
/SEW/INT_FO_V-LAST_CHANGED_BY =
/SEW/INT_FOLDERS-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_FO_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_FO_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_FO_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_FO_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_FOLDERS WHERE
  OBJECT = /SEW/INT_FO_V-OBJECT AND
  OBJECT_SEQNR = /SEW/INT_FO_V-OBJECT_SEQNR AND
  MOLGA = /SEW/INT_FO_V-MOLGA AND
  INFTY = /SEW/INT_FO_V-INFTY AND
  SEQNR = /SEW/INT_FO_V-SEQNR AND
  FOLDER = /SEW/INT_FO_V-FOLDER .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_FOLDERS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_FOLDERS WHERE
  OBJECT = /SEW/INT_FO_V-OBJECT AND
  OBJECT_SEQNR = /SEW/INT_FO_V-OBJECT_SEQNR AND
  MOLGA = /SEW/INT_FO_V-MOLGA AND
  INFTY = /SEW/INT_FO_V-INFTY AND
  SEQNR = /SEW/INT_FO_V-SEQNR AND
  FOLDER = /SEW/INT_FO_V-FOLDER .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_FOLDERS.
    ENDIF.
/SEW/INT_FOLDERS-MANDT =
/SEW/INT_FO_V-MANDT .
/SEW/INT_FOLDERS-OBJECT =
/SEW/INT_FO_V-OBJECT .
/SEW/INT_FOLDERS-OBJECT_SEQNR =
/SEW/INT_FO_V-OBJECT_SEQNR .
/SEW/INT_FOLDERS-MOLGA =
/SEW/INT_FO_V-MOLGA .
/SEW/INT_FOLDERS-INFTY =
/SEW/INT_FO_V-INFTY .
/SEW/INT_FOLDERS-SEQNR =
/SEW/INT_FO_V-SEQNR .
/SEW/INT_FOLDERS-FOLDER =
/SEW/INT_FO_V-FOLDER .
/SEW/INT_FOLDERS-PREV_FOLDER =
/SEW/INT_FO_V-PREV_FOLDER .
/SEW/INT_FOLDERS-TIME_SLICE =
/SEW/INT_FO_V-TIME_SLICE .
/SEW/INT_FOLDERS-LAST_CHANGED_AT =
/SEW/INT_FO_V-LAST_CHANGED_AT .
/SEW/INT_FOLDERS-LAST_CHANGED_BY =
/SEW/INT_FO_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_FOLDERS ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_FOLDERS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_FO_V-UPD_FLAG,
STATUS_/SEW/INT_FO_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_FO_V.
  SELECT SINGLE * FROM /SEW/INT_FOLDERS WHERE
OBJECT = /SEW/INT_FO_V-OBJECT AND
OBJECT_SEQNR = /SEW/INT_FO_V-OBJECT_SEQNR AND
MOLGA = /SEW/INT_FO_V-MOLGA AND
INFTY = /SEW/INT_FO_V-INFTY AND
SEQNR = /SEW/INT_FO_V-SEQNR AND
FOLDER = /SEW/INT_FO_V-FOLDER .
/SEW/INT_FO_V-MANDT =
/SEW/INT_FOLDERS-MANDT .
/SEW/INT_FO_V-OBJECT =
/SEW/INT_FOLDERS-OBJECT .
/SEW/INT_FO_V-OBJECT_SEQNR =
/SEW/INT_FOLDERS-OBJECT_SEQNR .
/SEW/INT_FO_V-MOLGA =
/SEW/INT_FOLDERS-MOLGA .
/SEW/INT_FO_V-INFTY =
/SEW/INT_FOLDERS-INFTY .
/SEW/INT_FO_V-SEQNR =
/SEW/INT_FOLDERS-SEQNR .
/SEW/INT_FO_V-FOLDER =
/SEW/INT_FOLDERS-FOLDER .
/SEW/INT_FO_V-PREV_FOLDER =
/SEW/INT_FOLDERS-PREV_FOLDER .
/SEW/INT_FO_V-TIME_SLICE =
/SEW/INT_FOLDERS-TIME_SLICE .
/SEW/INT_FO_V-LAST_CHANGED_AT =
/SEW/INT_FOLDERS-LAST_CHANGED_AT .
/SEW/INT_FO_V-LAST_CHANGED_BY =
/SEW/INT_FOLDERS-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_FO_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_FO_V-OBJECT TO
/SEW/INT_FOLDERS-OBJECT .
MOVE /SEW/INT_FO_V-OBJECT_SEQNR TO
/SEW/INT_FOLDERS-OBJECT_SEQNR .
MOVE /SEW/INT_FO_V-MOLGA TO
/SEW/INT_FOLDERS-MOLGA .
MOVE /SEW/INT_FO_V-INFTY TO
/SEW/INT_FOLDERS-INFTY .
MOVE /SEW/INT_FO_V-SEQNR TO
/SEW/INT_FOLDERS-SEQNR .
MOVE /SEW/INT_FO_V-FOLDER TO
/SEW/INT_FOLDERS-FOLDER .
MOVE /SEW/INT_FO_V-MANDT TO
/SEW/INT_FOLDERS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_FOLDERS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_FOLDERS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_FOLDERS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_FU_V...................................*
FORM GET_DATA_/SEW/INT_FU_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_FOUP WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_FU_V .
/SEW/INT_FU_V-MANDT =
/SEW/INT_FOUP-MANDT .
/SEW/INT_FU_V-MOLGA =
/SEW/INT_FOUP-MOLGA .
/SEW/INT_FU_V-MASSN =
/SEW/INT_FOUP-MASSN .
/SEW/INT_FU_V-MASSG =
/SEW/INT_FOUP-MASSG .
/SEW/INT_FU_V-FOLLOW_UP =
/SEW/INT_FOUP-FOLLOW_UP .
<VIM_TOTAL_STRUC> = /SEW/INT_FU_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_FU_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_FU_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_FU_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_FOUP WHERE
  MOLGA = /SEW/INT_FU_V-MOLGA AND
  MASSG = /SEW/INT_FU_V-MASSG AND
  MASSN = /SEW/INT_FU_V-MASSN .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_FOUP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_FOUP WHERE
  MOLGA = /SEW/INT_FU_V-MOLGA AND
  MASSG = /SEW/INT_FU_V-MASSG AND
  MASSN = /SEW/INT_FU_V-MASSN .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_FOUP.
    ENDIF.
/SEW/INT_FOUP-MANDT =
/SEW/INT_FU_V-MANDT .
/SEW/INT_FOUP-MOLGA =
/SEW/INT_FU_V-MOLGA .
/SEW/INT_FOUP-MASSN =
/SEW/INT_FU_V-MASSN .
/SEW/INT_FOUP-MASSG =
/SEW/INT_FU_V-MASSG .
/SEW/INT_FOUP-FOLLOW_UP =
/SEW/INT_FU_V-FOLLOW_UP .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_FOUP ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_FOUP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_FU_V-UPD_FLAG,
STATUS_/SEW/INT_FU_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_FU_V.
  SELECT SINGLE * FROM /SEW/INT_FOUP WHERE
MOLGA = /SEW/INT_FU_V-MOLGA AND
MASSG = /SEW/INT_FU_V-MASSG AND
MASSN = /SEW/INT_FU_V-MASSN .
/SEW/INT_FU_V-MANDT =
/SEW/INT_FOUP-MANDT .
/SEW/INT_FU_V-MOLGA =
/SEW/INT_FOUP-MOLGA .
/SEW/INT_FU_V-MASSN =
/SEW/INT_FOUP-MASSN .
/SEW/INT_FU_V-MASSG =
/SEW/INT_FOUP-MASSG .
/SEW/INT_FU_V-FOLLOW_UP =
/SEW/INT_FOUP-FOLLOW_UP .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_FU_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_FU_V-MOLGA TO
/SEW/INT_FOUP-MOLGA .
MOVE /SEW/INT_FU_V-MASSG TO
/SEW/INT_FOUP-MASSG .
MOVE /SEW/INT_FU_V-MASSN TO
/SEW/INT_FOUP-MASSN .
MOVE /SEW/INT_FU_V-MANDT TO
/SEW/INT_FOUP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_FOUP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_FOUP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_FOUP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_F_V....................................*
FORM GET_DATA_/SEW/INT_F_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_FIELDS WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_F_V .
/SEW/INT_F_V-MANDT =
/SEW/INT_FIELDS-MANDT .
/SEW/INT_F_V-OBJECT =
/SEW/INT_FIELDS-OBJECT .
/SEW/INT_F_V-OBJECT_SEQNR =
/SEW/INT_FIELDS-OBJECT_SEQNR .
/SEW/INT_F_V-MOLGA =
/SEW/INT_FIELDS-MOLGA .
/SEW/INT_F_V-INFTY =
/SEW/INT_FIELDS-INFTY .
/SEW/INT_F_V-SEQNR =
/SEW/INT_FIELDS-SEQNR .
/SEW/INT_F_V-FOLDER =
/SEW/INT_FIELDS-FOLDER .
/SEW/INT_F_V-FIELD =
/SEW/INT_FIELDS-FIELD .
/SEW/INT_F_V-ELEMENT =
/SEW/INT_FIELDS-ELEMENT .
/SEW/INT_F_V-IMPORT =
/SEW/INT_FIELDS-IMPORT .
/SEW/INT_F_V-EXPORT =
/SEW/INT_FIELDS-EXPORT .
/SEW/INT_F_V-CHANGEABLE =
/SEW/INT_FIELDS-CHANGEABLE .
/SEW/INT_F_V-LAST_CHANGED_AT =
/SEW/INT_FIELDS-LAST_CHANGED_AT .
/SEW/INT_F_V-LAST_CHANGED_BY =
/SEW/INT_FIELDS-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_F_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_F_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_F_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_F_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_FIELDS WHERE
  OBJECT = /SEW/INT_F_V-OBJECT AND
  OBJECT_SEQNR = /SEW/INT_F_V-OBJECT_SEQNR AND
  MOLGA = /SEW/INT_F_V-MOLGA AND
  INFTY = /SEW/INT_F_V-INFTY AND
  SEQNR = /SEW/INT_F_V-SEQNR AND
  FOLDER = /SEW/INT_F_V-FOLDER AND
  FIELD = /SEW/INT_F_V-FIELD .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_FIELDS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_FIELDS WHERE
  OBJECT = /SEW/INT_F_V-OBJECT AND
  OBJECT_SEQNR = /SEW/INT_F_V-OBJECT_SEQNR AND
  MOLGA = /SEW/INT_F_V-MOLGA AND
  INFTY = /SEW/INT_F_V-INFTY AND
  SEQNR = /SEW/INT_F_V-SEQNR AND
  FOLDER = /SEW/INT_F_V-FOLDER AND
  FIELD = /SEW/INT_F_V-FIELD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_FIELDS.
    ENDIF.
/SEW/INT_FIELDS-MANDT =
/SEW/INT_F_V-MANDT .
/SEW/INT_FIELDS-OBJECT =
/SEW/INT_F_V-OBJECT .
/SEW/INT_FIELDS-OBJECT_SEQNR =
/SEW/INT_F_V-OBJECT_SEQNR .
/SEW/INT_FIELDS-MOLGA =
/SEW/INT_F_V-MOLGA .
/SEW/INT_FIELDS-INFTY =
/SEW/INT_F_V-INFTY .
/SEW/INT_FIELDS-SEQNR =
/SEW/INT_F_V-SEQNR .
/SEW/INT_FIELDS-FOLDER =
/SEW/INT_F_V-FOLDER .
/SEW/INT_FIELDS-FIELD =
/SEW/INT_F_V-FIELD .
/SEW/INT_FIELDS-ELEMENT =
/SEW/INT_F_V-ELEMENT .
/SEW/INT_FIELDS-IMPORT =
/SEW/INT_F_V-IMPORT .
/SEW/INT_FIELDS-EXPORT =
/SEW/INT_F_V-EXPORT .
/SEW/INT_FIELDS-CHANGEABLE =
/SEW/INT_F_V-CHANGEABLE .
/SEW/INT_FIELDS-LAST_CHANGED_AT =
/SEW/INT_F_V-LAST_CHANGED_AT .
/SEW/INT_FIELDS-LAST_CHANGED_BY =
/SEW/INT_F_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_FIELDS ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_FIELDS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_F_V-UPD_FLAG,
STATUS_/SEW/INT_F_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_F_V.
  SELECT SINGLE * FROM /SEW/INT_FIELDS WHERE
OBJECT = /SEW/INT_F_V-OBJECT AND
OBJECT_SEQNR = /SEW/INT_F_V-OBJECT_SEQNR AND
MOLGA = /SEW/INT_F_V-MOLGA AND
INFTY = /SEW/INT_F_V-INFTY AND
SEQNR = /SEW/INT_F_V-SEQNR AND
FOLDER = /SEW/INT_F_V-FOLDER AND
FIELD = /SEW/INT_F_V-FIELD .
/SEW/INT_F_V-MANDT =
/SEW/INT_FIELDS-MANDT .
/SEW/INT_F_V-OBJECT =
/SEW/INT_FIELDS-OBJECT .
/SEW/INT_F_V-OBJECT_SEQNR =
/SEW/INT_FIELDS-OBJECT_SEQNR .
/SEW/INT_F_V-MOLGA =
/SEW/INT_FIELDS-MOLGA .
/SEW/INT_F_V-INFTY =
/SEW/INT_FIELDS-INFTY .
/SEW/INT_F_V-SEQNR =
/SEW/INT_FIELDS-SEQNR .
/SEW/INT_F_V-FOLDER =
/SEW/INT_FIELDS-FOLDER .
/SEW/INT_F_V-FIELD =
/SEW/INT_FIELDS-FIELD .
/SEW/INT_F_V-ELEMENT =
/SEW/INT_FIELDS-ELEMENT .
/SEW/INT_F_V-IMPORT =
/SEW/INT_FIELDS-IMPORT .
/SEW/INT_F_V-EXPORT =
/SEW/INT_FIELDS-EXPORT .
/SEW/INT_F_V-CHANGEABLE =
/SEW/INT_FIELDS-CHANGEABLE .
/SEW/INT_F_V-LAST_CHANGED_AT =
/SEW/INT_FIELDS-LAST_CHANGED_AT .
/SEW/INT_F_V-LAST_CHANGED_BY =
/SEW/INT_FIELDS-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_F_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_F_V-OBJECT TO
/SEW/INT_FIELDS-OBJECT .
MOVE /SEW/INT_F_V-OBJECT_SEQNR TO
/SEW/INT_FIELDS-OBJECT_SEQNR .
MOVE /SEW/INT_F_V-MOLGA TO
/SEW/INT_FIELDS-MOLGA .
MOVE /SEW/INT_F_V-INFTY TO
/SEW/INT_FIELDS-INFTY .
MOVE /SEW/INT_F_V-SEQNR TO
/SEW/INT_FIELDS-SEQNR .
MOVE /SEW/INT_F_V-FOLDER TO
/SEW/INT_FIELDS-FOLDER .
MOVE /SEW/INT_F_V-FIELD TO
/SEW/INT_FIELDS-FIELD .
MOVE /SEW/INT_F_V-MANDT TO
/SEW/INT_FIELDS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_FIELDS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_FIELDS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_FIELDS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_G_V....................................*
FORM GET_DATA_/SEW/INT_G_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_GENERAL WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_G_V .
/SEW/INT_G_V-MANDT =
/SEW/INT_GENERAL-MANDT .
/SEW/INT_G_V-FIELD =
/SEW/INT_GENERAL-FIELD .
/SEW/INT_G_V-PATH =
/SEW/INT_GENERAL-PATH .
/SEW/INT_G_V-LAST_CHANGED_AT =
/SEW/INT_GENERAL-LAST_CHANGED_AT .
/SEW/INT_G_V-LAST_CHANGED_BY =
/SEW/INT_GENERAL-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_G_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_G_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_G_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_G_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_GENERAL WHERE
  FIELD = /SEW/INT_G_V-FIELD .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_GENERAL .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_GENERAL WHERE
  FIELD = /SEW/INT_G_V-FIELD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_GENERAL.
    ENDIF.
/SEW/INT_GENERAL-MANDT =
/SEW/INT_G_V-MANDT .
/SEW/INT_GENERAL-FIELD =
/SEW/INT_G_V-FIELD .
/SEW/INT_GENERAL-PATH =
/SEW/INT_G_V-PATH .
/SEW/INT_GENERAL-LAST_CHANGED_AT =
/SEW/INT_G_V-LAST_CHANGED_AT .
/SEW/INT_GENERAL-LAST_CHANGED_BY =
/SEW/INT_G_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_GENERAL ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_GENERAL .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_G_V-UPD_FLAG,
STATUS_/SEW/INT_G_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_G_V.
  SELECT SINGLE * FROM /SEW/INT_GENERAL WHERE
FIELD = /SEW/INT_G_V-FIELD .
/SEW/INT_G_V-MANDT =
/SEW/INT_GENERAL-MANDT .
/SEW/INT_G_V-FIELD =
/SEW/INT_GENERAL-FIELD .
/SEW/INT_G_V-PATH =
/SEW/INT_GENERAL-PATH .
/SEW/INT_G_V-LAST_CHANGED_AT =
/SEW/INT_GENERAL-LAST_CHANGED_AT .
/SEW/INT_G_V-LAST_CHANGED_BY =
/SEW/INT_GENERAL-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_G_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_G_V-FIELD TO
/SEW/INT_GENERAL-FIELD .
MOVE /SEW/INT_G_V-MANDT TO
/SEW/INT_GENERAL-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_GENERAL'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_GENERAL TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_GENERAL'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_IG_V...................................*
FORM GET_DATA_/SEW/INT_IG_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_INF_GEN WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_IG_V .
/SEW/INT_IG_V-MANDT =
/SEW/INT_INF_GEN-MANDT .
/SEW/INT_IG_V-MOLGA =
/SEW/INT_INF_GEN-MOLGA .
/SEW/INT_IG_V-INFTY =
/SEW/INT_INF_GEN-INFTY .
/SEW/INT_IG_V-EARLIEST_CHANGE =
/SEW/INT_INF_GEN-EARLIEST_CHANGE .
/SEW/INT_IG_V-LAST_CHANGED_AT =
/SEW/INT_INF_GEN-LAST_CHANGED_AT .
/SEW/INT_IG_V-LAST_CHANGED_BY =
/SEW/INT_INF_GEN-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_IG_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_IG_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_IG_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_IG_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_INF_GEN WHERE
  MOLGA = /SEW/INT_IG_V-MOLGA AND
  INFTY = /SEW/INT_IG_V-INFTY .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_INF_GEN .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_INF_GEN WHERE
  MOLGA = /SEW/INT_IG_V-MOLGA AND
  INFTY = /SEW/INT_IG_V-INFTY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_INF_GEN.
    ENDIF.
/SEW/INT_INF_GEN-MANDT =
/SEW/INT_IG_V-MANDT .
/SEW/INT_INF_GEN-MOLGA =
/SEW/INT_IG_V-MOLGA .
/SEW/INT_INF_GEN-INFTY =
/SEW/INT_IG_V-INFTY .
/SEW/INT_INF_GEN-EARLIEST_CHANGE =
/SEW/INT_IG_V-EARLIEST_CHANGE .
/SEW/INT_INF_GEN-LAST_CHANGED_AT =
/SEW/INT_IG_V-LAST_CHANGED_AT .
/SEW/INT_INF_GEN-LAST_CHANGED_BY =
/SEW/INT_IG_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_INF_GEN ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_INF_GEN .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_IG_V-UPD_FLAG,
STATUS_/SEW/INT_IG_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_IG_V.
  SELECT SINGLE * FROM /SEW/INT_INF_GEN WHERE
MOLGA = /SEW/INT_IG_V-MOLGA AND
INFTY = /SEW/INT_IG_V-INFTY .
/SEW/INT_IG_V-MANDT =
/SEW/INT_INF_GEN-MANDT .
/SEW/INT_IG_V-MOLGA =
/SEW/INT_INF_GEN-MOLGA .
/SEW/INT_IG_V-INFTY =
/SEW/INT_INF_GEN-INFTY .
/SEW/INT_IG_V-EARLIEST_CHANGE =
/SEW/INT_INF_GEN-EARLIEST_CHANGE .
/SEW/INT_IG_V-LAST_CHANGED_AT =
/SEW/INT_INF_GEN-LAST_CHANGED_AT .
/SEW/INT_IG_V-LAST_CHANGED_BY =
/SEW/INT_INF_GEN-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_IG_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_IG_V-MOLGA TO
/SEW/INT_INF_GEN-MOLGA .
MOVE /SEW/INT_IG_V-INFTY TO
/SEW/INT_INF_GEN-INFTY .
MOVE /SEW/INT_IG_V-MANDT TO
/SEW/INT_INF_GEN-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_INF_GEN'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_INF_GEN TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_INF_GEN'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_I_V....................................*
FORM GET_DATA_/SEW/INT_I_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_INFOTYP WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_I_V .
/SEW/INT_I_V-MANDT =
/SEW/INT_INFOTYP-MANDT .
/SEW/INT_I_V-OBJECT =
/SEW/INT_INFOTYP-OBJECT .
/SEW/INT_I_V-MOLGA =
/SEW/INT_INFOTYP-MOLGA .
/SEW/INT_I_V-INFTY =
/SEW/INT_INFOTYP-INFTY .
/SEW/INT_I_V-SEQNR =
/SEW/INT_INFOTYP-SEQNR .
/SEW/INT_I_V-OBJECT_SEQNR =
/SEW/INT_INFOTYP-OBJECT_SEQNR .
/SEW/INT_I_V-LAST_CHANGED_AT =
/SEW/INT_INFOTYP-LAST_CHANGED_AT .
/SEW/INT_I_V-LAST_CHANGED_BY =
/SEW/INT_INFOTYP-LAST_CHANGED_BY .
/SEW/INT_I_V-MULTIPLE =
/SEW/INT_INFOTYP-MULTIPLE .
    SELECT * FROM /SEW/INT_OBJECTS WHERE
MOLGA = /SEW/INT_INFOTYP-MOLGA AND
OBJECT = /SEW/INT_INFOTYP-OBJECT .
      EXIT.
    ENDSELECT.
<VIM_TOTAL_STRUC> = /SEW/INT_I_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_I_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_I_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_I_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_INFOTYP WHERE
  OBJECT = /SEW/INT_I_V-OBJECT AND
  MOLGA = /SEW/INT_I_V-MOLGA AND
  INFTY = /SEW/INT_I_V-INFTY AND
  SEQNR = /SEW/INT_I_V-SEQNR AND
  OBJECT_SEQNR = /SEW/INT_I_V-OBJECT_SEQNR .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_INFOTYP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_INFOTYP WHERE
  OBJECT = /SEW/INT_I_V-OBJECT AND
  MOLGA = /SEW/INT_I_V-MOLGA AND
  INFTY = /SEW/INT_I_V-INFTY AND
  SEQNR = /SEW/INT_I_V-SEQNR AND
  OBJECT_SEQNR = /SEW/INT_I_V-OBJECT_SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_INFOTYP.
    ENDIF.
/SEW/INT_INFOTYP-MANDT =
/SEW/INT_I_V-MANDT .
/SEW/INT_INFOTYP-OBJECT =
/SEW/INT_I_V-OBJECT .
/SEW/INT_INFOTYP-MOLGA =
/SEW/INT_I_V-MOLGA .
/SEW/INT_INFOTYP-INFTY =
/SEW/INT_I_V-INFTY .
/SEW/INT_INFOTYP-SEQNR =
/SEW/INT_I_V-SEQNR .
/SEW/INT_INFOTYP-OBJECT_SEQNR =
/SEW/INT_I_V-OBJECT_SEQNR .
/SEW/INT_INFOTYP-LAST_CHANGED_AT =
/SEW/INT_I_V-LAST_CHANGED_AT .
/SEW/INT_INFOTYP-LAST_CHANGED_BY =
/SEW/INT_I_V-LAST_CHANGED_BY .
/SEW/INT_INFOTYP-MULTIPLE =
/SEW/INT_I_V-MULTIPLE .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_INFOTYP ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_INFOTYP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_I_V-UPD_FLAG,
STATUS_/SEW/INT_I_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_I_V.
  SELECT SINGLE * FROM /SEW/INT_INFOTYP WHERE
OBJECT = /SEW/INT_I_V-OBJECT AND
MOLGA = /SEW/INT_I_V-MOLGA AND
INFTY = /SEW/INT_I_V-INFTY AND
SEQNR = /SEW/INT_I_V-SEQNR AND
OBJECT_SEQNR = /SEW/INT_I_V-OBJECT_SEQNR .
/SEW/INT_I_V-MANDT =
/SEW/INT_INFOTYP-MANDT .
/SEW/INT_I_V-OBJECT =
/SEW/INT_INFOTYP-OBJECT .
/SEW/INT_I_V-MOLGA =
/SEW/INT_INFOTYP-MOLGA .
/SEW/INT_I_V-INFTY =
/SEW/INT_INFOTYP-INFTY .
/SEW/INT_I_V-SEQNR =
/SEW/INT_INFOTYP-SEQNR .
/SEW/INT_I_V-OBJECT_SEQNR =
/SEW/INT_INFOTYP-OBJECT_SEQNR .
/SEW/INT_I_V-LAST_CHANGED_AT =
/SEW/INT_INFOTYP-LAST_CHANGED_AT .
/SEW/INT_I_V-LAST_CHANGED_BY =
/SEW/INT_INFOTYP-LAST_CHANGED_BY .
/SEW/INT_I_V-MULTIPLE =
/SEW/INT_INFOTYP-MULTIPLE .
    SELECT * FROM /SEW/INT_OBJECTS WHERE
MOLGA = /SEW/INT_INFOTYP-MOLGA AND
OBJECT = /SEW/INT_INFOTYP-OBJECT .
      EXIT.
    ENDSELECT.
    IF SY-SUBRC NE 0.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_I_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_I_V-OBJECT TO
/SEW/INT_INFOTYP-OBJECT .
MOVE /SEW/INT_I_V-MOLGA TO
/SEW/INT_INFOTYP-MOLGA .
MOVE /SEW/INT_I_V-INFTY TO
/SEW/INT_INFOTYP-INFTY .
MOVE /SEW/INT_I_V-SEQNR TO
/SEW/INT_INFOTYP-SEQNR .
MOVE /SEW/INT_I_V-OBJECT_SEQNR TO
/SEW/INT_INFOTYP-OBJECT_SEQNR .
MOVE /SEW/INT_I_V-MANDT TO
/SEW/INT_INFOTYP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_INFOTYP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_INFOTYP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_INFOTYP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_/SEW/INT_I_V USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
/SEW/INT_INFOTYP-MANDT =
/SEW/INT_I_V-MANDT .
/SEW/INT_INFOTYP-OBJECT =
/SEW/INT_I_V-OBJECT .
/SEW/INT_INFOTYP-MOLGA =
/SEW/INT_I_V-MOLGA .
/SEW/INT_INFOTYP-INFTY =
/SEW/INT_I_V-INFTY .
/SEW/INT_INFOTYP-SEQNR =
/SEW/INT_I_V-SEQNR .
/SEW/INT_INFOTYP-OBJECT_SEQNR =
/SEW/INT_I_V-OBJECT_SEQNR .
/SEW/INT_INFOTYP-LAST_CHANGED_AT =
/SEW/INT_I_V-LAST_CHANGED_AT .
/SEW/INT_INFOTYP-LAST_CHANGED_BY =
/SEW/INT_I_V-LAST_CHANGED_BY .
/SEW/INT_INFOTYP-MULTIPLE =
/SEW/INT_I_V-MULTIPLE .
    SELECT * FROM /SEW/INT_OBJECTS WHERE
MOLGA = /SEW/INT_INFOTYP-MOLGA AND
OBJECT = /SEW/INT_INFOTYP-OBJECT .
      EXIT.
    ENDSELECT.
    IF SY-SUBRC NE 0.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: /SEW/INT_MF_V...................................*
FORM GET_DATA_/SEW/INT_MF_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_MAPP_FI WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_MF_V .
/SEW/INT_MF_V-MANDT =
/SEW/INT_MAPP_FI-MANDT .
/SEW/INT_MF_V-MOLGA =
/SEW/INT_MAPP_FI-MOLGA .
/SEW/INT_MF_V-INFTY =
/SEW/INT_MAPP_FI-INFTY .
/SEW/INT_MF_V-SEQNR =
/SEW/INT_MAPP_FI-SEQNR .
/SEW/INT_MF_V-FIELD_SAP =
/SEW/INT_MAPP_FI-FIELD_SAP .
/SEW/INT_MF_V-FIELD_ORACLE =
/SEW/INT_MAPP_FI-FIELD_ORACLE .
/SEW/INT_MF_V-IMPORT =
/SEW/INT_MAPP_FI-IMPORT .
/SEW/INT_MF_V-EXPORT =
/SEW/INT_MAPP_FI-EXPORT .
/SEW/INT_MF_V-IS_COMPLEX =
/SEW/INT_MAPP_FI-IS_COMPLEX .
/SEW/INT_MF_V-LAST_CHANGED_AT =
/SEW/INT_MAPP_FI-LAST_CHANGED_AT .
/SEW/INT_MF_V-LAST_CHANGED_BY =
/SEW/INT_MAPP_FI-LAST_CHANGED_BY .
    SELECT * FROM /SEW/INT_INFOTYP WHERE
MOLGA = /SEW/INT_MAPP_FI-MOLGA AND
INFTY = /SEW/INT_MAPP_FI-INFTY AND
SEQNR = /SEW/INT_MAPP_FI-SEQNR .
      EXIT.
    ENDSELECT.
<VIM_TOTAL_STRUC> = /SEW/INT_MF_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_MF_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_MF_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_MF_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_MAPP_FI WHERE
  MOLGA = /SEW/INT_MF_V-MOLGA AND
  INFTY = /SEW/INT_MF_V-INFTY AND
  SEQNR = /SEW/INT_MF_V-SEQNR AND
  FIELD_SAP = /SEW/INT_MF_V-FIELD_SAP AND
  FIELD_ORACLE = /SEW/INT_MF_V-FIELD_ORACLE AND
  IMPORT = /SEW/INT_MF_V-IMPORT AND
  EXPORT = /SEW/INT_MF_V-EXPORT .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_MAPP_FI .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_MAPP_FI WHERE
  MOLGA = /SEW/INT_MF_V-MOLGA AND
  INFTY = /SEW/INT_MF_V-INFTY AND
  SEQNR = /SEW/INT_MF_V-SEQNR AND
  FIELD_SAP = /SEW/INT_MF_V-FIELD_SAP AND
  FIELD_ORACLE = /SEW/INT_MF_V-FIELD_ORACLE AND
  IMPORT = /SEW/INT_MF_V-IMPORT AND
  EXPORT = /SEW/INT_MF_V-EXPORT .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_MAPP_FI.
    ENDIF.
/SEW/INT_MAPP_FI-MANDT =
/SEW/INT_MF_V-MANDT .
/SEW/INT_MAPP_FI-MOLGA =
/SEW/INT_MF_V-MOLGA .
/SEW/INT_MAPP_FI-INFTY =
/SEW/INT_MF_V-INFTY .
/SEW/INT_MAPP_FI-SEQNR =
/SEW/INT_MF_V-SEQNR .
/SEW/INT_MAPP_FI-FIELD_SAP =
/SEW/INT_MF_V-FIELD_SAP .
/SEW/INT_MAPP_FI-FIELD_ORACLE =
/SEW/INT_MF_V-FIELD_ORACLE .
/SEW/INT_MAPP_FI-IMPORT =
/SEW/INT_MF_V-IMPORT .
/SEW/INT_MAPP_FI-EXPORT =
/SEW/INT_MF_V-EXPORT .
/SEW/INT_MAPP_FI-IS_COMPLEX =
/SEW/INT_MF_V-IS_COMPLEX .
/SEW/INT_MAPP_FI-LAST_CHANGED_AT =
/SEW/INT_MF_V-LAST_CHANGED_AT .
/SEW/INT_MAPP_FI-LAST_CHANGED_BY =
/SEW/INT_MF_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_MAPP_FI ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_MAPP_FI .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_MF_V-UPD_FLAG,
STATUS_/SEW/INT_MF_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_MF_V.
  SELECT SINGLE * FROM /SEW/INT_MAPP_FI WHERE
MOLGA = /SEW/INT_MF_V-MOLGA AND
INFTY = /SEW/INT_MF_V-INFTY AND
SEQNR = /SEW/INT_MF_V-SEQNR AND
FIELD_SAP = /SEW/INT_MF_V-FIELD_SAP AND
FIELD_ORACLE = /SEW/INT_MF_V-FIELD_ORACLE AND
IMPORT = /SEW/INT_MF_V-IMPORT AND
EXPORT = /SEW/INT_MF_V-EXPORT .
/SEW/INT_MF_V-MANDT =
/SEW/INT_MAPP_FI-MANDT .
/SEW/INT_MF_V-MOLGA =
/SEW/INT_MAPP_FI-MOLGA .
/SEW/INT_MF_V-INFTY =
/SEW/INT_MAPP_FI-INFTY .
/SEW/INT_MF_V-SEQNR =
/SEW/INT_MAPP_FI-SEQNR .
/SEW/INT_MF_V-FIELD_SAP =
/SEW/INT_MAPP_FI-FIELD_SAP .
/SEW/INT_MF_V-FIELD_ORACLE =
/SEW/INT_MAPP_FI-FIELD_ORACLE .
/SEW/INT_MF_V-IMPORT =
/SEW/INT_MAPP_FI-IMPORT .
/SEW/INT_MF_V-EXPORT =
/SEW/INT_MAPP_FI-EXPORT .
/SEW/INT_MF_V-IS_COMPLEX =
/SEW/INT_MAPP_FI-IS_COMPLEX .
/SEW/INT_MF_V-LAST_CHANGED_AT =
/SEW/INT_MAPP_FI-LAST_CHANGED_AT .
/SEW/INT_MF_V-LAST_CHANGED_BY =
/SEW/INT_MAPP_FI-LAST_CHANGED_BY .
    SELECT * FROM /SEW/INT_INFOTYP WHERE
MOLGA = /SEW/INT_MAPP_FI-MOLGA AND
INFTY = /SEW/INT_MAPP_FI-INFTY AND
SEQNR = /SEW/INT_MAPP_FI-SEQNR .
      EXIT.
    ENDSELECT.
    IF SY-SUBRC NE 0.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_MF_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_MF_V-MOLGA TO
/SEW/INT_MAPP_FI-MOLGA .
MOVE /SEW/INT_MF_V-INFTY TO
/SEW/INT_MAPP_FI-INFTY .
MOVE /SEW/INT_MF_V-SEQNR TO
/SEW/INT_MAPP_FI-SEQNR .
MOVE /SEW/INT_MF_V-FIELD_SAP TO
/SEW/INT_MAPP_FI-FIELD_SAP .
MOVE /SEW/INT_MF_V-FIELD_ORACLE TO
/SEW/INT_MAPP_FI-FIELD_ORACLE .
MOVE /SEW/INT_MF_V-IMPORT TO
/SEW/INT_MAPP_FI-IMPORT .
MOVE /SEW/INT_MF_V-EXPORT TO
/SEW/INT_MAPP_FI-EXPORT .
MOVE /SEW/INT_MF_V-MANDT TO
/SEW/INT_MAPP_FI-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_MAPP_FI'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_MAPP_FI TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_MAPP_FI'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_/SEW/INT_MF_V USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
/SEW/INT_MAPP_FI-MANDT =
/SEW/INT_MF_V-MANDT .
/SEW/INT_MAPP_FI-MOLGA =
/SEW/INT_MF_V-MOLGA .
/SEW/INT_MAPP_FI-INFTY =
/SEW/INT_MF_V-INFTY .
/SEW/INT_MAPP_FI-SEQNR =
/SEW/INT_MF_V-SEQNR .
/SEW/INT_MAPP_FI-FIELD_SAP =
/SEW/INT_MF_V-FIELD_SAP .
/SEW/INT_MAPP_FI-FIELD_ORACLE =
/SEW/INT_MF_V-FIELD_ORACLE .
/SEW/INT_MAPP_FI-IMPORT =
/SEW/INT_MF_V-IMPORT .
/SEW/INT_MAPP_FI-EXPORT =
/SEW/INT_MF_V-EXPORT .
/SEW/INT_MAPP_FI-IS_COMPLEX =
/SEW/INT_MF_V-IS_COMPLEX .
/SEW/INT_MAPP_FI-LAST_CHANGED_AT =
/SEW/INT_MF_V-LAST_CHANGED_AT .
/SEW/INT_MAPP_FI-LAST_CHANGED_BY =
/SEW/INT_MF_V-LAST_CHANGED_BY .
    SELECT * FROM /SEW/INT_INFOTYP WHERE
MOLGA = /SEW/INT_MAPP_FI-MOLGA AND
INFTY = /SEW/INT_MAPP_FI-INFTY AND
SEQNR = /SEW/INT_MAPP_FI-SEQNR .
      EXIT.
    ENDSELECT.
    IF SY-SUBRC NE 0.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: /SEW/INT_M_V....................................*
FORM GET_DATA_/SEW/INT_M_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_MAPPING WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_M_V .
/SEW/INT_M_V-MADNT =
/SEW/INT_MAPPING-MANDT .
/SEW/INT_M_V-MOLGA =
/SEW/INT_MAPPING-MOLGA .
/SEW/INT_M_V-INFTY =
/SEW/INT_MAPPING-INFTY .
/SEW/INT_M_V-FIELD_SAP =
/SEW/INT_MAPPING-FIELD_SAP .
/SEW/INT_M_V-FIELD_ORACLE =
/SEW/INT_MAPPING-FIELD_ORACLE .
/SEW/INT_M_V-VALUE_SAP =
/SEW/INT_MAPPING-VALUE_SAP .
/SEW/INT_M_V-VALUE_ORACLE =
/SEW/INT_MAPPING-VALUE_ORACLE .
/SEW/INT_M_V-IMPORT =
/SEW/INT_MAPPING-IMPORT .
/SEW/INT_M_V-SEQNR =
/SEW/INT_MAPPING-SEQNR .
/SEW/INT_M_V-EXPORT =
/SEW/INT_MAPPING-EXPORT .
/SEW/INT_M_V-LAST_CHANGED_AT =
/SEW/INT_MAPPING-LAST_CHANGED_AT .
/SEW/INT_M_V-LAST_CHANGED_BY =
/SEW/INT_MAPPING-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_M_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_M_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_M_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_M_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_MAPPING WHERE
  MOLGA = /SEW/INT_M_V-MOLGA AND
  INFTY = /SEW/INT_M_V-INFTY AND
  SEQNR = /SEW/INT_M_V-SEQNR AND
  FIELD_SAP = /SEW/INT_M_V-FIELD_SAP AND
  FIELD_ORACLE = /SEW/INT_M_V-FIELD_ORACLE AND
  IMPORT = /SEW/INT_M_V-IMPORT AND
  EXPORT = /SEW/INT_M_V-EXPORT AND
  VALUE_SAP = /SEW/INT_M_V-VALUE_SAP AND
  VALUE_ORACLE = /SEW/INT_M_V-VALUE_ORACLE .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_MAPPING .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_MAPPING WHERE
  MOLGA = /SEW/INT_M_V-MOLGA AND
  INFTY = /SEW/INT_M_V-INFTY AND
  SEQNR = /SEW/INT_M_V-SEQNR AND
  FIELD_SAP = /SEW/INT_M_V-FIELD_SAP AND
  FIELD_ORACLE = /SEW/INT_M_V-FIELD_ORACLE AND
  IMPORT = /SEW/INT_M_V-IMPORT AND
  EXPORT = /SEW/INT_M_V-EXPORT AND
  VALUE_SAP = /SEW/INT_M_V-VALUE_SAP AND
  VALUE_ORACLE = /SEW/INT_M_V-VALUE_ORACLE .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_MAPPING.
    ENDIF.
/SEW/INT_MAPPING-MANDT =
/SEW/INT_M_V-MADNT .
/SEW/INT_MAPPING-MOLGA =
/SEW/INT_M_V-MOLGA .
/SEW/INT_MAPPING-INFTY =
/SEW/INT_M_V-INFTY .
/SEW/INT_MAPPING-FIELD_SAP =
/SEW/INT_M_V-FIELD_SAP .
/SEW/INT_MAPPING-FIELD_ORACLE =
/SEW/INT_M_V-FIELD_ORACLE .
/SEW/INT_MAPPING-VALUE_SAP =
/SEW/INT_M_V-VALUE_SAP .
/SEW/INT_MAPPING-VALUE_ORACLE =
/SEW/INT_M_V-VALUE_ORACLE .
/SEW/INT_MAPPING-IMPORT =
/SEW/INT_M_V-IMPORT .
/SEW/INT_MAPPING-SEQNR =
/SEW/INT_M_V-SEQNR .
/SEW/INT_MAPPING-EXPORT =
/SEW/INT_M_V-EXPORT .
/SEW/INT_MAPPING-LAST_CHANGED_AT =
/SEW/INT_M_V-LAST_CHANGED_AT .
/SEW/INT_MAPPING-LAST_CHANGED_BY =
/SEW/INT_M_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_MAPPING ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_MAPPING .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_M_V-UPD_FLAG,
STATUS_/SEW/INT_M_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_M_V.
  SELECT SINGLE * FROM /SEW/INT_MAPPING WHERE
MOLGA = /SEW/INT_M_V-MOLGA AND
INFTY = /SEW/INT_M_V-INFTY AND
SEQNR = /SEW/INT_M_V-SEQNR AND
FIELD_SAP = /SEW/INT_M_V-FIELD_SAP AND
FIELD_ORACLE = /SEW/INT_M_V-FIELD_ORACLE AND
IMPORT = /SEW/INT_M_V-IMPORT AND
EXPORT = /SEW/INT_M_V-EXPORT AND
VALUE_SAP = /SEW/INT_M_V-VALUE_SAP AND
VALUE_ORACLE = /SEW/INT_M_V-VALUE_ORACLE .
/SEW/INT_M_V-MADNT =
/SEW/INT_MAPPING-MANDT .
/SEW/INT_M_V-MOLGA =
/SEW/INT_MAPPING-MOLGA .
/SEW/INT_M_V-INFTY =
/SEW/INT_MAPPING-INFTY .
/SEW/INT_M_V-FIELD_SAP =
/SEW/INT_MAPPING-FIELD_SAP .
/SEW/INT_M_V-FIELD_ORACLE =
/SEW/INT_MAPPING-FIELD_ORACLE .
/SEW/INT_M_V-VALUE_SAP =
/SEW/INT_MAPPING-VALUE_SAP .
/SEW/INT_M_V-VALUE_ORACLE =
/SEW/INT_MAPPING-VALUE_ORACLE .
/SEW/INT_M_V-IMPORT =
/SEW/INT_MAPPING-IMPORT .
/SEW/INT_M_V-SEQNR =
/SEW/INT_MAPPING-SEQNR .
/SEW/INT_M_V-EXPORT =
/SEW/INT_MAPPING-EXPORT .
/SEW/INT_M_V-LAST_CHANGED_AT =
/SEW/INT_MAPPING-LAST_CHANGED_AT .
/SEW/INT_M_V-LAST_CHANGED_BY =
/SEW/INT_MAPPING-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_M_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_M_V-MOLGA TO
/SEW/INT_MAPPING-MOLGA .
MOVE /SEW/INT_M_V-INFTY TO
/SEW/INT_MAPPING-INFTY .
MOVE /SEW/INT_M_V-SEQNR TO
/SEW/INT_MAPPING-SEQNR .
MOVE /SEW/INT_M_V-FIELD_SAP TO
/SEW/INT_MAPPING-FIELD_SAP .
MOVE /SEW/INT_M_V-FIELD_ORACLE TO
/SEW/INT_MAPPING-FIELD_ORACLE .
MOVE /SEW/INT_M_V-IMPORT TO
/SEW/INT_MAPPING-IMPORT .
MOVE /SEW/INT_M_V-EXPORT TO
/SEW/INT_MAPPING-EXPORT .
MOVE /SEW/INT_M_V-VALUE_SAP TO
/SEW/INT_MAPPING-VALUE_SAP .
MOVE /SEW/INT_M_V-VALUE_ORACLE TO
/SEW/INT_MAPPING-VALUE_ORACLE .
MOVE /SEW/INT_M_V-MADNT TO
/SEW/INT_MAPPING-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_MAPPING'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_MAPPING TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_MAPPING'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_N_V....................................*
FORM GET_DATA_/SEW/INT_N_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_NOTES WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_N_V .
/SEW/INT_N_V-MANDT =
/SEW/INT_NOTES-MANDT .
/SEW/INT_N_V-MOLGA =
/SEW/INT_NOTES-MOLGA .
/SEW/INT_N_V-MSGID =
/SEW/INT_NOTES-MSGID .
/SEW/INT_N_V-MSGNO =
/SEW/INT_NOTES-MSGNO .
/SEW/INT_N_V-MSGTY =
/SEW/INT_NOTES-MSGTY .
/SEW/INT_N_V-MSGTEXT =
/SEW/INT_NOTES-MSGTEXT .
<VIM_TOTAL_STRUC> = /SEW/INT_N_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_N_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_N_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_N_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_NOTES WHERE
  MOLGA = /SEW/INT_N_V-MOLGA AND
  MSGID = /SEW/INT_N_V-MSGID AND
  MSGNO = /SEW/INT_N_V-MSGNO AND
  MSGTY = /SEW/INT_N_V-MSGTY .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_NOTES .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_NOTES WHERE
  MOLGA = /SEW/INT_N_V-MOLGA AND
  MSGID = /SEW/INT_N_V-MSGID AND
  MSGNO = /SEW/INT_N_V-MSGNO AND
  MSGTY = /SEW/INT_N_V-MSGTY .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_NOTES.
    ENDIF.
/SEW/INT_NOTES-MANDT =
/SEW/INT_N_V-MANDT .
/SEW/INT_NOTES-MOLGA =
/SEW/INT_N_V-MOLGA .
/SEW/INT_NOTES-MSGID =
/SEW/INT_N_V-MSGID .
/SEW/INT_NOTES-MSGNO =
/SEW/INT_N_V-MSGNO .
/SEW/INT_NOTES-MSGTY =
/SEW/INT_N_V-MSGTY .
/SEW/INT_NOTES-MSGTEXT =
/SEW/INT_N_V-MSGTEXT .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_NOTES ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_NOTES .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_N_V-UPD_FLAG,
STATUS_/SEW/INT_N_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_N_V.
  SELECT SINGLE * FROM /SEW/INT_NOTES WHERE
MOLGA = /SEW/INT_N_V-MOLGA AND
MSGID = /SEW/INT_N_V-MSGID AND
MSGNO = /SEW/INT_N_V-MSGNO AND
MSGTY = /SEW/INT_N_V-MSGTY .
/SEW/INT_N_V-MANDT =
/SEW/INT_NOTES-MANDT .
/SEW/INT_N_V-MOLGA =
/SEW/INT_NOTES-MOLGA .
/SEW/INT_N_V-MSGID =
/SEW/INT_NOTES-MSGID .
/SEW/INT_N_V-MSGNO =
/SEW/INT_NOTES-MSGNO .
/SEW/INT_N_V-MSGTY =
/SEW/INT_NOTES-MSGTY .
/SEW/INT_N_V-MSGTEXT =
/SEW/INT_NOTES-MSGTEXT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_N_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_N_V-MOLGA TO
/SEW/INT_NOTES-MOLGA .
MOVE /SEW/INT_N_V-MSGID TO
/SEW/INT_NOTES-MSGID .
MOVE /SEW/INT_N_V-MSGNO TO
/SEW/INT_NOTES-MSGNO .
MOVE /SEW/INT_N_V-MSGTY TO
/SEW/INT_NOTES-MSGTY .
MOVE /SEW/INT_N_V-MANDT TO
/SEW/INT_NOTES-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_NOTES'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_NOTES TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_NOTES'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_O_V....................................*
FORM GET_DATA_/SEW/INT_O_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_OBJECTS WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_O_V .
/SEW/INT_O_V-MANDT =
/SEW/INT_OBJECTS-MANDT .
/SEW/INT_O_V-MOLGA =
/SEW/INT_OBJECTS-MOLGA .
/SEW/INT_O_V-OBJECT =
/SEW/INT_OBJECTS-OBJECT .
/SEW/INT_O_V-OBJECT_SEQNR =
/SEW/INT_OBJECTS-OBJECT_SEQNR .
/SEW/INT_O_V-SCENARIO =
/SEW/INT_OBJECTS-SCENARIO .
/SEW/INT_O_V-FOLDER =
/SEW/INT_OBJECTS-FOLDER .
/SEW/INT_O_V-ID_SAP =
/SEW/INT_OBJECTS-ID_SAP .
/SEW/INT_O_V-ID_ORACLE =
/SEW/INT_OBJECTS-ID_ORACLE .
/SEW/INT_O_V-LAST_CHANGED_AT =
/SEW/INT_OBJECTS-LAST_CHANGED_AT .
/SEW/INT_O_V-LAST_CHANGED_BY =
/SEW/INT_OBJECTS-LAST_CHANGED_BY .
    SELECT SINGLE * FROM T000.
    IF SY-SUBRC EQ 0.
    ENDIF.
<VIM_TOTAL_STRUC> = /SEW/INT_O_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_O_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_O_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_O_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_OBJECTS WHERE
  MOLGA = /SEW/INT_O_V-MOLGA AND
  OBJECT = /SEW/INT_O_V-OBJECT AND
  OBJECT_SEQNR = /SEW/INT_O_V-OBJECT_SEQNR .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_OBJECTS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_OBJECTS WHERE
  MOLGA = /SEW/INT_O_V-MOLGA AND
  OBJECT = /SEW/INT_O_V-OBJECT AND
  OBJECT_SEQNR = /SEW/INT_O_V-OBJECT_SEQNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_OBJECTS.
    ENDIF.
/SEW/INT_OBJECTS-MANDT =
/SEW/INT_O_V-MANDT .
/SEW/INT_OBJECTS-MOLGA =
/SEW/INT_O_V-MOLGA .
/SEW/INT_OBJECTS-OBJECT =
/SEW/INT_O_V-OBJECT .
/SEW/INT_OBJECTS-OBJECT_SEQNR =
/SEW/INT_O_V-OBJECT_SEQNR .
/SEW/INT_OBJECTS-SCENARIO =
/SEW/INT_O_V-SCENARIO .
/SEW/INT_OBJECTS-FOLDER =
/SEW/INT_O_V-FOLDER .
/SEW/INT_OBJECTS-ID_SAP =
/SEW/INT_O_V-ID_SAP .
/SEW/INT_OBJECTS-ID_ORACLE =
/SEW/INT_O_V-ID_ORACLE .
/SEW/INT_OBJECTS-LAST_CHANGED_AT =
/SEW/INT_O_V-LAST_CHANGED_AT .
/SEW/INT_OBJECTS-LAST_CHANGED_BY =
/SEW/INT_O_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_OBJECTS ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_OBJECTS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_O_V-UPD_FLAG,
STATUS_/SEW/INT_O_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_O_V.
  SELECT SINGLE * FROM /SEW/INT_OBJECTS WHERE
MOLGA = /SEW/INT_O_V-MOLGA AND
OBJECT = /SEW/INT_O_V-OBJECT AND
OBJECT_SEQNR = /SEW/INT_O_V-OBJECT_SEQNR .
/SEW/INT_O_V-MANDT =
/SEW/INT_OBJECTS-MANDT .
/SEW/INT_O_V-MOLGA =
/SEW/INT_OBJECTS-MOLGA .
/SEW/INT_O_V-OBJECT =
/SEW/INT_OBJECTS-OBJECT .
/SEW/INT_O_V-OBJECT_SEQNR =
/SEW/INT_OBJECTS-OBJECT_SEQNR .
/SEW/INT_O_V-SCENARIO =
/SEW/INT_OBJECTS-SCENARIO .
/SEW/INT_O_V-FOLDER =
/SEW/INT_OBJECTS-FOLDER .
/SEW/INT_O_V-ID_SAP =
/SEW/INT_OBJECTS-ID_SAP .
/SEW/INT_O_V-ID_ORACLE =
/SEW/INT_OBJECTS-ID_ORACLE .
/SEW/INT_O_V-LAST_CHANGED_AT =
/SEW/INT_OBJECTS-LAST_CHANGED_AT .
/SEW/INT_O_V-LAST_CHANGED_BY =
/SEW/INT_OBJECTS-LAST_CHANGED_BY .
    SELECT SINGLE * FROM T000.
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_O_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_O_V-MOLGA TO
/SEW/INT_OBJECTS-MOLGA .
MOVE /SEW/INT_O_V-OBJECT TO
/SEW/INT_OBJECTS-OBJECT .
MOVE /SEW/INT_O_V-OBJECT_SEQNR TO
/SEW/INT_OBJECTS-OBJECT_SEQNR .
MOVE /SEW/INT_O_V-MANDT TO
/SEW/INT_OBJECTS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_OBJECTS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_OBJECTS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_OBJECTS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_/SEW/INT_O_V USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
/SEW/INT_OBJECTS-MANDT =
/SEW/INT_O_V-MANDT .
/SEW/INT_OBJECTS-MOLGA =
/SEW/INT_O_V-MOLGA .
/SEW/INT_OBJECTS-OBJECT =
/SEW/INT_O_V-OBJECT .
/SEW/INT_OBJECTS-OBJECT_SEQNR =
/SEW/INT_O_V-OBJECT_SEQNR .
/SEW/INT_OBJECTS-SCENARIO =
/SEW/INT_O_V-SCENARIO .
/SEW/INT_OBJECTS-FOLDER =
/SEW/INT_O_V-FOLDER .
/SEW/INT_OBJECTS-ID_SAP =
/SEW/INT_O_V-ID_SAP .
/SEW/INT_OBJECTS-ID_ORACLE =
/SEW/INT_O_V-ID_ORACLE .
/SEW/INT_OBJECTS-LAST_CHANGED_AT =
/SEW/INT_O_V-LAST_CHANGED_AT .
/SEW/INT_OBJECTS-LAST_CHANGED_BY =
/SEW/INT_O_V-LAST_CHANGED_BY .
    SELECT SINGLE * FROM T000.
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: /SEW/INT_S......................................*
FORM GET_DATA_/SEW/INT_S.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_SUPERUS WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_S .
/SEW/INT_S-MANDT =
/SEW/INT_SUPERUS-MANDT .
/SEW/INT_S-SBGRP_CODE =
/SEW/INT_SUPERUS-SBGRP_CODE .
/SEW/INT_S-SB_CODE =
/SEW/INT_SUPERUS-SB_CODE .
/SEW/INT_S-BUKRS =
/SEW/INT_SUPERUS-BUKRS .
/SEW/INT_S-UNAME =
/SEW/INT_SUPERUS-UNAME .
/SEW/INT_S-BEGDA =
/SEW/INT_SUPERUS-BEGDA .
/SEW/INT_S-ENDDA =
/SEW/INT_SUPERUS-ENDDA .
<VIM_TOTAL_STRUC> = /SEW/INT_S.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_S .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_S.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_S-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_SUPERUS WHERE
  SBGRP_CODE = /SEW/INT_S-SBGRP_CODE AND
  SB_CODE = /SEW/INT_S-SB_CODE AND
  BUKRS = /SEW/INT_S-BUKRS AND
  UNAME = /SEW/INT_S-UNAME .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_SUPERUS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_SUPERUS WHERE
  SBGRP_CODE = /SEW/INT_S-SBGRP_CODE AND
  SB_CODE = /SEW/INT_S-SB_CODE AND
  BUKRS = /SEW/INT_S-BUKRS AND
  UNAME = /SEW/INT_S-UNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_SUPERUS.
    ENDIF.
/SEW/INT_SUPERUS-MANDT =
/SEW/INT_S-MANDT .
/SEW/INT_SUPERUS-SBGRP_CODE =
/SEW/INT_S-SBGRP_CODE .
/SEW/INT_SUPERUS-SB_CODE =
/SEW/INT_S-SB_CODE .
/SEW/INT_SUPERUS-BUKRS =
/SEW/INT_S-BUKRS .
/SEW/INT_SUPERUS-UNAME =
/SEW/INT_S-UNAME .
/SEW/INT_SUPERUS-BEGDA =
/SEW/INT_S-BEGDA .
/SEW/INT_SUPERUS-ENDDA =
/SEW/INT_S-ENDDA .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_SUPERUS ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_SUPERUS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_S-UPD_FLAG,
STATUS_/SEW/INT_S-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_/SEW/INT_S.
  SELECT SINGLE * FROM /SEW/INT_SUPERUS WHERE
SBGRP_CODE = /SEW/INT_S-SBGRP_CODE AND
SB_CODE = /SEW/INT_S-SB_CODE AND
BUKRS = /SEW/INT_S-BUKRS AND
UNAME = /SEW/INT_S-UNAME .
/SEW/INT_S-MANDT =
/SEW/INT_SUPERUS-MANDT .
/SEW/INT_S-SBGRP_CODE =
/SEW/INT_SUPERUS-SBGRP_CODE .
/SEW/INT_S-SB_CODE =
/SEW/INT_SUPERUS-SB_CODE .
/SEW/INT_S-BUKRS =
/SEW/INT_SUPERUS-BUKRS .
/SEW/INT_S-UNAME =
/SEW/INT_SUPERUS-UNAME .
/SEW/INT_S-BEGDA =
/SEW/INT_SUPERUS-BEGDA .
/SEW/INT_S-ENDDA =
/SEW/INT_SUPERUS-ENDDA .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_S USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_S-SBGRP_CODE TO
/SEW/INT_SUPERUS-SBGRP_CODE .
MOVE /SEW/INT_S-SB_CODE TO
/SEW/INT_SUPERUS-SB_CODE .
MOVE /SEW/INT_S-BUKRS TO
/SEW/INT_SUPERUS-BUKRS .
MOVE /SEW/INT_S-UNAME TO
/SEW/INT_SUPERUS-UNAME .
MOVE /SEW/INT_S-MANDT TO
/SEW/INT_SUPERUS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_SUPERUS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_SUPERUS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_SUPERUS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: /SEW/INT_V_V....................................*
FORM GET_DATA_/SEW/INT_V_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM /SEW/INT_VALUES WHERE
(VIM_WHERETAB) .
    CLEAR /SEW/INT_V_V .
/SEW/INT_V_V-MANDT =
/SEW/INT_VALUES-MANDT .
/SEW/INT_V_V-OBJECT =
/SEW/INT_VALUES-OBJECT .
/SEW/INT_V_V-MOLGA =
/SEW/INT_VALUES-MOLGA .
/SEW/INT_V_V-INFTY =
/SEW/INT_VALUES-INFTY .
/SEW/INT_V_V-FIELD =
/SEW/INT_VALUES-FIELD .
/SEW/INT_V_V-VALUE =
/SEW/INT_VALUES-VALUE .
/SEW/INT_V_V-LAST_CHANGED_AT =
/SEW/INT_VALUES-LAST_CHANGED_AT .
/SEW/INT_V_V-LAST_CHANGED_BY =
/SEW/INT_VALUES-LAST_CHANGED_BY .
<VIM_TOTAL_STRUC> = /SEW/INT_V_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_/SEW/INT_V_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO /SEW/INT_V_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_/SEW/INT_V_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_VALUES WHERE
  OBJECT = /SEW/INT_V_V-OBJECT AND
  MOLGA = /SEW/INT_V_V-MOLGA AND
  INFTY = /SEW/INT_V_V-INFTY AND
  FIELD = /SEW/INT_V_V-FIELD .
    IF SY-SUBRC = 0.
    DELETE /SEW/INT_VALUES .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM /SEW/INT_VALUES WHERE
  OBJECT = /SEW/INT_V_V-OBJECT AND
  MOLGA = /SEW/INT_V_V-MOLGA AND
  INFTY = /SEW/INT_V_V-INFTY AND
  FIELD = /SEW/INT_V_V-FIELD .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR /SEW/INT_VALUES.
    ENDIF.
/SEW/INT_VALUES-MANDT =
/SEW/INT_V_V-MANDT .
/SEW/INT_VALUES-OBJECT =
/SEW/INT_V_V-OBJECT .
/SEW/INT_VALUES-MOLGA =
/SEW/INT_V_V-MOLGA .
/SEW/INT_VALUES-INFTY =
/SEW/INT_V_V-INFTY .
/SEW/INT_VALUES-FIELD =
/SEW/INT_V_V-FIELD .
/SEW/INT_VALUES-VALUE =
/SEW/INT_V_V-VALUE .
/SEW/INT_VALUES-LAST_CHANGED_AT =
/SEW/INT_V_V-LAST_CHANGED_AT .
/SEW/INT_VALUES-LAST_CHANGED_BY =
/SEW/INT_V_V-LAST_CHANGED_BY .
    IF SY-SUBRC = 0.
    UPDATE /SEW/INT_VALUES ##WARN_OK.
    ELSE.
    INSERT /SEW/INT_VALUES .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_/SEW/INT_V_V-UPD_FLAG,
STATUS_/SEW/INT_V_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_/SEW/INT_V_V.
  SELECT SINGLE * FROM /SEW/INT_VALUES WHERE
OBJECT = /SEW/INT_V_V-OBJECT AND
MOLGA = /SEW/INT_V_V-MOLGA AND
INFTY = /SEW/INT_V_V-INFTY AND
FIELD = /SEW/INT_V_V-FIELD .
/SEW/INT_V_V-MANDT =
/SEW/INT_VALUES-MANDT .
/SEW/INT_V_V-OBJECT =
/SEW/INT_VALUES-OBJECT .
/SEW/INT_V_V-MOLGA =
/SEW/INT_VALUES-MOLGA .
/SEW/INT_V_V-INFTY =
/SEW/INT_VALUES-INFTY .
/SEW/INT_V_V-FIELD =
/SEW/INT_VALUES-FIELD .
/SEW/INT_V_V-VALUE =
/SEW/INT_VALUES-VALUE .
/SEW/INT_V_V-LAST_CHANGED_AT =
/SEW/INT_VALUES-LAST_CHANGED_AT .
/SEW/INT_V_V-LAST_CHANGED_BY =
/SEW/INT_VALUES-LAST_CHANGED_BY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_/SEW/INT_V_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE /SEW/INT_V_V-OBJECT TO
/SEW/INT_VALUES-OBJECT .
MOVE /SEW/INT_V_V-MOLGA TO
/SEW/INT_VALUES-MOLGA .
MOVE /SEW/INT_V_V-INFTY TO
/SEW/INT_VALUES-INFTY .
MOVE /SEW/INT_V_V-FIELD TO
/SEW/INT_VALUES-FIELD .
MOVE /SEW/INT_V_V-MANDT TO
/SEW/INT_VALUES-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = '/SEW/INT_VALUES'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN /SEW/INT_VALUES TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING '/SEW/INT_VALUES'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
